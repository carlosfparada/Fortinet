---

- name: Create VPC {{ ec2_vpc_name }}
  amazon.aws.ec2_vpc_net:
    name: "{{ ec2_vpc_name }}"
    cidr_block: "{{ ec2_vpc_cidr }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ ec2_vpc_name }}"
  register: vpc

- name: Create Subnet in VPC
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: "{{ ec2_subnet_cidr }}"
    region: "{{ ec2_vpc_region }}"
    availability_zone: "{{ ec2_vpc_az }}"
    state: present
    tags:
      name: "{{ ec2_subnet_name }}"
  register: subnet

- name: Create Internet Gateway (IGW)
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ ec2_igw_name }}"
  register: igw

- name: Create Route Table and IGW route
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_vpc_region }}"
    state: present
    tags:
      name: "{{ ec2_rt_name }}"
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"

- name: Create Security Group
  amazon.aws.ec2_security_group:
    name: "{{ ec2_sg_name }}"
    description: Allow all on ports
    state: present
    rules:
      - proto: tcp
        ports: "{{ ec2_sg_openports }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: Allow all on ports
    region: "{{ ec2_vpc_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    tags:
      name: "{{ ec2_sg_name }}"

# Checkpoint
- name: Get AMI by Name (Checkpoint)
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ ec2_ckp_image_name }}"
    region: "{{ ec2_vpc_region }}"
  register: ami_ckp_find

- name: Create Checkpoint instance
  amazon.aws.ec2_instance:
    image_id: "{{ ami_ckp_find.images[-1].image_id | default('') }}"
    instance_type: "{{ ec2_ckp_flavor_name }}"
    security_group: "{{ ec2_sg_name }}"
    name: "{{ ec2_ckp_instance_name }}"
    key_name: "{{ ec2_ckp_key_name }}"
    region: "{{ ec2_vpc_region }}"
    availability_zone: "{{ ec2_vpc_az }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      name: "{{ ec2_ckp_instance_name }}"
    volumes:
      - device_name: "{{ ec2_ckp_ebs_name | default('/dev/sda1', true) }}"
        ebs:
          volume_size: "{{ ec2_ckp_disk_size | default(20, true) }}"
          delete_on_termination: true
    state: running
  register: ec2_instance

- name: Print instance details
  ansible.builtin.debug:
    msg: "Instance DNS name is: {{ ec2_instance.instances[0].public_dns_name }} with IP address {{ ec2_instance.instances[0].public_ip_address }}"

- name: Sleep for 30 seconds and continue with play
  wait_for:
    timeout: 30
  delegate_to: localhost

# Windows
- name: Get AMI by Name (Windows)
  amazon.aws.ec2_ami_info:
    filters:
      name: "{{ ec2_win_image_name }}"
    region: "{{ ec2_vpc_region }}"
    availability_zone: "{{ ec2_vpc_az }}"
  register: ami_win_find

- name: Create Windows instance
  amazon.aws.ec2_instance:
    image_id: "{{ ami_win_find.images[-1].image_id | default('') }}"
    instance_type: "{{ ec2_win_flavor_name }}"
    security_group: "{{ ec2_sg_name }}"
    name: "{{ ec2_win_instance_name }}"
    key_name: "{{ ec2_win_key_name }}"
    region: "{{ ec2_vpc_region }}"
    availability_zone: "{{ ec2_vpc_az }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    network:
      assign_public_ip: true
    tags:
      name: "{{ ec2_win_instance_name }}"
    state: running
  register: ec2_instance

- name: Print instance details
  ansible.builtin.debug:
    msg: "Instance DNS name is: {{ ec2_instance.instances[0].public_dns_name }} with IP address {{ ec2_instance.instances[0].public_ip_address }}"

- name: Sleep for 30 seconds and continue with play
  wait_for:
    timeout: 30
  delegate_to: localhost
